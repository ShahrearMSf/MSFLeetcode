from typing import Optional
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def recoverFromPreorder(self, traversal: str) -> Optional[TreeNode]:
        stack = []
        i = 0
        while i < len(traversal):
            depth = 0
            while i < len(traversal) and traversal[i] == '-':  # Count dashes
                depth += 1
                i += 1
            
            num_start = i
            while i < len(traversal) and traversal[i].isdigit():  # Read number
                i += 1
            val = int(traversal[num_start:i])
            
            node = TreeNode(val)
            
            while len(stack) > depth:  # Ensure correct parent
                stack.pop()
            
            if stack:
                if not stack[-1].left:
                    stack[-1].left = node
                else:
                    stack[-1].right = node
            
            stack.append(node)  # Push new node
        
        return stack[0]  # Root node
