# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: bool
        """
        def check_balance(node):
            if not node:
                return 0  # Height of an empty tree is 0
            
            # Recursively check the height of the left and right subtrees
            left_height = check_balance(node.left)
            if left_height == -1:
                return -1  # Left subtree is not balanced
            
            right_height = check_balance(node.right)
            if right_height == -1:
                return -1  # Right subtree is not balanced
            
            # Check if current node is balanced
            if abs(left_height - right_height) > 1:
                return -1  # Current node is not balanced
            
            # Return the height of the current node
            return 1 + max(left_height, right_height)
        
        # Start the recursive check from the root
        return check_balance(root) != -1
