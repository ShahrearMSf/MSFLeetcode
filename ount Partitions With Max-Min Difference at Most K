from collections import deque
from typing import List

class Solution:
    def countPartitions(self, nums: List[int], k: int) -> int:
        MOD = 10**9 + 7
        n = len(nums)

        maxDeque = deque()
        minDeque = deque()
        dp = [0] * (n + 1)
        prefix = [0] * (n + 1)

        dp[0] = 1
        prefix[0] = 1
        left = 0

        for right in range(n):
            # Maintain maxDeque (descending)
            while maxDeque and nums[maxDeque[-1]] <= nums[right]:
                maxDeque.pop()
            maxDeque.append(right)

            # Maintain minDeque (ascending)
            while minDeque and nums[minDeque[-1]] >= nums[right]:
                minDeque.pop()
            minDeque.append(right)

            # Shrink window from the left if max - min > k
            while nums[maxDeque[0]] - nums[minDeque[0]] > k:
                if maxDeque[0] == left:
                    maxDeque.popleft()
                if minDeque[0] == left:
                    minDeque.popleft()
                left += 1

            # Calculate dp for right+1
            # Ways to partition nums[:right+1] = sum of dp[left..right]
            dp[right + 1] = (prefix[right] - prefix[left - 1] if left > 0 else prefix[right]) % MOD
            prefix[right + 1] = (prefix[right] + dp[right + 1]) % MOD

        return dp[n] % MOD
