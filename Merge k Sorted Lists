from heapq import heappush, heappop

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[Optional[ListNode]]
        :rtype: Optional[ListNode]
        """
        min_heap = []
        
        # Insert the head of each list into the heap
        for i, l in enumerate(lists):
            if l:
                heappush(min_heap, (l.val, i, l))  # (value, index, node)
                
        dummy = ListNode()  # Dummy node to simplify edge cases
        current = dummy
        
        while min_heap:
            val, i, node = heappop(min_heap)
            current.next = node
            current = current.next
            if node.next:
                heappush(min_heap, (node.next.val, i, node.next))
                
        return dummy.next
