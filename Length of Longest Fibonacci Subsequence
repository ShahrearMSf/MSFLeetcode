class Solution(object):
    def lenLongestFibSubseq(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        index_map = {num: i for i, num in enumerate(arr)}  # Map value to index
        dp = {}  # Dictionary to store the length of Fibonacci-like subsequence
        max_len = 0
        
        for k in range(len(arr)):
            for j in range(k):
                i = index_map.get(arr[k] - arr[j])  # Find the possible preceding element
                if i is not None and i < j:
                    dp[(j, k)] = dp.get((i, j), 2) + 1  # Update sequence length
                    max_len = max(max_len, dp[(j, k)])
                    
        return max_len if max_len >= 3 else 0  # Return 0 if no valid sequence found
