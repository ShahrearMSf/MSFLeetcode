class Solution(object):
    def numTilePossibilities(self, tiles):
        """
        :type tiles: str
        :rtype: int
        """
        # Convert the tiles string to a list to easily manipulate the characters
        tiles = list(tiles)
        
        # Set to hold all unique subsequences
        unique_sequences = set()

        # Function to perform backtracking
        def backtrack(remaining_tiles, current_sequence):
            # If the current sequence is not empty, add it to the set
            if current_sequence:
                unique_sequences.add(current_sequence)
            
            # Try all possible subsequences
            for i in range(len(remaining_tiles)):
                # Pick a tile and continue generating subsequences
                backtrack(remaining_tiles[:i] + remaining_tiles[i+1:], current_sequence + remaining_tiles[i])

        # Start the backtracking process
        backtrack(tiles, "")
        
        # Return the count of unique subsequences
        return len(unique_sequences)

# Example usage:
solution = Solution()
print(solution.numTilePossibilities("AAB"))  # Output: 8
print(solution.numTilePossibilities("AAABBC"))  # Output: 188
print(solution.numTilePossibilities("V"))  # Output: 1
