from bisect import bisect_right

class Solution:
    def maxValue(self, events, k):
        # Step 1: Sort the events based on their end time
        # This helps to efficiently find non-overlapping events using binary search
        events.sort(key=lambda x: x[1])
        n = len(events)

        # Step 2: Extract start times for binary search (not strictly necessary in this version but useful if reused)
        start_times = [e[0] for e in events]

        # Step 3: Initialize DP table
        # dp[i][j] = max value by considering first i events and attending at most j events
        dp = [[0] * (k + 1) for _ in range(n + 1)]

        # Step 4: Iterate through each event
        for i in range(1, n + 1):
            start, end, value = events[i - 1]

            # Step 5: Find the index of the last event that ends before the current event starts
            prev = self.findLastNonOverlapping(events, i - 1, start)

            for j in range(1, k + 1):
                # Option 1: Skip the current event -> carry over the previous value
                # Option 2: Take the current event -> add its value to the best value from previous non-overlapping events
                dp[i][j] = max(
                    dp[i - 1][j],              # Not taking current event
                    dp[prev + 1][j - 1] + value  # Taking current event
                )

        # Step 6: The result is the best value using all n events with up to k selections
        return dp[n][k]

    def findLastNonOverlapping(self, events, right, targetStart):
        # Binary search to find the index of the last event that ends before targetStart
        left = 0
        res = -1
        while left <= right:
            mid = (left + right) // 2
            if events[mid][1] < targetStart:
                res = mid
                left = mid + 1
            else:
                right = mid - 1
        return res
