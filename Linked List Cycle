# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if not head or not head.next:  # If list is empty or has only one node
            return False

        slow, fast = head, head.next  # Initialize two pointers
        while fast and fast.next:
            if slow == fast:  # Cycle detected
                return True
            slow = slow.next       # Move slow pointer one step
            fast = fast.next.next  # Move fast pointer two steps
        
        return False  # No cycle
