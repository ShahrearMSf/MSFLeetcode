from typing import List

class Solution:
    def maxFreeTime(self, eventTime: int, startTime: List[int], endTime: List[int]) -> int:
        n = len(startTime)
        if n == 0:
            return eventTime

        # Step 1: Compute gaps between meetings
        gaps = [0] * (n + 1)
        gaps[0] = startTime[0]
        for i in range(1, n):
            gaps[i] = startTime[i] - endTime[i - 1]
        gaps[n] = eventTime - endTime[-1]

        # Step 2: Compute largest gap to the right of each index
        largest_right = [0] * (n + 1)
        for i in range(n - 1, -1, -1):
            largest_right[i] = max(largest_right[i + 1], gaps[i + 1])

        # Step 3: Iterate and compute max possible free time
        max_free = 0
        largest_left = 0

        for i in range(1, len(gaps)):
            duration = endTime[i - 1] - startTime[i - 1]
            can_fit_left = largest_left >= duration
            can_fit_right = largest_right[i] >= duration

            if can_fit_left or can_fit_right:
                merged = gaps[i - 1] + gaps[i] + duration
                max_free = max(max_free, merged)

            current_gap = gaps[i - 1] + gaps[i]
            max_free = max(max_free, current_gap)
            largest_left = max(largest_left, gaps[i - 1])

        return max_free
