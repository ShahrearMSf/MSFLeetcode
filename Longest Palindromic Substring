class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        def expandAroundCenter(left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            # Return the palindromic substring
            return s[left + 1:right]
        
        # Initialize the longest palindrome
        longest_palindrome = ""
        
        for i in range(len(s)):
            # Check for odd-length palindromes (single center)
            odd_palindrome = expandAroundCenter(i, i)
            # Check for even-length palindromes (double center)
            even_palindrome = expandAroundCenter(i, i + 1)
            
            # Update the longest palindrome
            if len(odd_palindrome) > len(longest_palindrome):
                longest_palindrome = odd_palindrome
            if len(even_palindrome) > len(longest_palindrome):
                longest_palindrome = even_palindrome
        
        return longest_palindrome
